class Node:
    def __init__(self, value):
        self.value = value
        self.next = None

class LinkedList:
    def __init__(self):
        new_node = Node
        self.head = None
        self.tail = None
        self.length = 0
    
    def __str__(self):
        temp_node=self.head
        result=''
        while temp_node is not None:
            result+=str(temp_node.value)
            if temp_node.next is not None:
                result+='->'
            temp_node=temp_node.next
        return result

    def append(self, value):
        new_node = Node(value)
        if self.head is None:  
            self.head = new_node
            self.tail = new_node
        else:
            self.tail.next = new_node  
            self.tail = new_node
        self.length += 1
   
    def prepend(self,value):
        new_node=Node(value)
        if self.head is  None:
            self.head=new_node
            self.tail=new_node
        else:
            new_node.next=self.head
            self.head=new_node
        self.length += 1
    

    def insert(self,index,value):
        new_node=Node(value)
        if index<0 or index>self.length:
            return False
        if self.length ==0:
            self.head= new_node
            self.tail= new_node
        elif index==0:
            new_node.next=self.head
            self.head=new_node
        else:
           temp_node=self.head
           for _ in range(index-1):
               temp_node = temp_node.next
           new_node.next=temp_node.next
           temp_node.next=new_node
        self.length+= 1 
        return True 
    

    def traversal(self):
        current=self.head
        while current is not None:
            print(current.value)
            current=current.next
    
    def search(self,target):
        current=self.head
        index = 0
        while current is not None:
            if current==target:
                return index
            current=current.next
            index +=1 
                  
        return index
    
    def get (self,index):
         if index==0:
           return self.tail
         if index<-1 or index>=self.length:
             return None
         current=self.head
         for _ in range (index):
            current=current.next
         return current.value
    
    def pop_first (self):
        pop_node=self.head
        if self.length==1:
            self.head=None
            self.tail=None
        else:
            self.head=self.head.next
            pop_node.next=None
        self.length -= 1 
        return pop_node
    

    def pop(self):
        pop_node=self.tail
        temp=self.head
        while temp.next is not self.tail:
            temp=temp.next
        temp=self.tail
        temp.next=None
        self.length -=1
        return pop_node
    

    def remove(self, index):
        if self.head is None or index < 0 or index >= self.length:
           return None
 
        pop_node = self.head
 
        if index == 0:
            self.head = self.head.next
            if self.head is None or self.head.next is None:
             self.tail = self.head
        else:
            current_node = self.head
            for _ in range(index - 1):
                current_node = current_node.next
            pop_node = current_node.next
            current_node.next = pop_node.next
            if index == self.length - 1:
                self.tail = current_node
 
        self.length -= 1
        return pop_node.value
    

        
    

new_linkedlist = LinkedList()
new_linkedlist.prepend(10)
new_linkedlist.append(20)
new_linkedlist.append(30)
new_linkedlist.append(40) 
print (new_linkedlist)
print(new_linkedlist.remove(-1))
print (new_linkedlist)
                         

 

